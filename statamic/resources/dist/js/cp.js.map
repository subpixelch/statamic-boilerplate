{"version":3,"names":[],"mappings":"","sources":["cp.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar $ = (window.$);\n\nglobal.cp_url = function (url) {\n\turl = Statamic.cpRoot + '/' + url;\n\treturn url.replace(/\\/+/g, '/');\n};\n\nglobal.resource_url = function (url) {\n\turl = Statamic.resourceUrl + '/' + url;\n\treturn url.replace(/\\/+/g, '/');\n};\n\n// Get url segments from the nth segment\nglobal.get_from_segment = function (count) {\n\treturn Statamic.urlPath.split('/').splice(count).join('/');\n};\n\nglobal.format_input_options = function (options) {\n\n\tif (typeof options[0] === 'string') {\n\t\treturn options;\n\t}\n\n\tvar formatted = [];\n\t_.each(options, function (value, key, list) {\n\t\tformatted.push({ 'value': key, 'text': value });\n\t});\n\n\treturn formatted;\n};\n\nglobal.dd = function (args) {\n\tconsole.log(args);\n};\n\nglobal.Cookies = require('cookies-js');\n\nrequire('./l10n/l10n');\nrequire('./vendor/sticky');\n\n$(document).ready(function () {\n\t$(\".sticky\").sticky({\n\t\ttopSpacing: 0,\n\t\tclassName: 'stuck',\n\t\twidthFromWrapper: false\n\t});\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./l10n/l10n\":2,\"./vendor/sticky\":4,\"cookies-js\":5}],2:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// Bring in the Lang library\nglobal.Lang = require('./lang');\n\n// Global aliases\nglobal.translate = function (key, replacements) {\n\n    var str = Lang.get(key, replacements);\n\n    if (str === key) {\n        str = str.replace('cp.', '');\n        str = makeTitle(str);\n    }\n\n    return str;\n};\nglobal.translate_choice = function (key, count, replacements) {\n    return Lang.choice(key, count, replacements);\n};\n\n// Set the translation messages. The object will be in the page body.\nLang.setMessages(Statamic.translations);\n\nfunction makeTitle(slug) {\n    var words = slug.split(/[-_]/);\n\n    for (var i = 0; i < words.length; i++) {\n        var word = words[i];\n        words[i] = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n\n    return words.join(' ');\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./lang\":3}],3:[function(require,module,exports){\n/*!\n *  Lang.js for Laravel localization in JavaScript.\n *\n *  @version 1.1.0\n *  @license MIT\n *  @site    https://github.com/rmariuzzo/Laravel-JS-Localization\n *  @author  rmariuzzo\n */\n\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (root, factory) {\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD support.\n        define([], factory);\n    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n        // NodeJS support.\n        module.exports = new (factory())();\n    } else {\n        // Browser global support.\n        root.Lang = new (factory())();\n    }\n})(undefined, function () {\n\n    // Default options //\n\n    var defaults = {\n        defaultLocale: 'en' /** The default locale if not set. */\n    };\n\n    // Constructor //\n\n    var Lang = function Lang(options) {\n        options = options || {};\n        this.defaultLocale = options.defaultLocale || defaults.defaultLocale;\n    };\n\n    // Methods //\n\n    /**\n     * Set messages source.\n     *\n     * @param messages {object} The messages source.\n     *\n     * @return void\n     */\n    Lang.prototype.setMessages = function (messages) {\n        this.messages = messages;\n    };\n\n    /**\n     * Returns a translation message.\n     *\n     * @param key {string} The key of the message.\n     * @param replacements {object} The replacements to be done in the message.\n     *\n     * @return {string} The translation message, if not found the given key.\n     */\n    Lang.prototype.get = function (key, replacements) {\n        if (!this.has(key)) {\n            return key;\n        }\n\n        var message = this._getMessage(key, replacements);\n        if (message === null) {\n            return key;\n        }\n\n        if (replacements) {\n            message = this._applyReplacements(message, replacements);\n        }\n\n        return message;\n    };\n\n    /**\n     * Returns true if the key is defined on the messages source.\n     *\n     * @param key {string} The key of the message.\n     *\n     * @return {boolean} true if the given key is defined on the messages source, otherwise false.\n     */\n    Lang.prototype.has = function (key) {\n        if (typeof key !== 'string' || !this.messages) {\n            return false;\n        }\n\n        return this._getMessage(key) !== null;\n    };\n\n    /**\n     * Gets the plural or singular form of the message specified based on an integer value.\n     *\n     * @param key {string} The key of the message.\n     * @param count {integer} The number of elements.\n     * @param replacements {object} The replacements to be done in the message.\n     *\n     * @return {string} The translation message according to an integer value.\n     */\n    Lang.prototype.choice = function (key, count, replacements) {\n        // Set default values for parameters replace and locale\n        replacements = typeof replacements !== 'undefined' ? replacements : {};\n\n        // The count must be replaced if found in the message\n        replacements['count'] = count;\n\n        // Message to get the plural or singular\n        var message = this.get(key, replacements);\n\n        // Check if message is not null or undefined\n        if (message === null || message === undefined) {\n            return message;\n        }\n\n        // Separate the plural from the singular, if any\n        var messageParts = message.split('|');\n\n        // Get the explicit rules, If any\n        var explicitRules = [];\n        var regex = /{\\d+}\\s(.+)|\\[\\d+,\\d+\\]\\s(.+)|\\[\\d+,Inf\\]\\s(.+)/;\n\n        for (var i = 0; i < messageParts.length; i++) {\n            messageParts[i] = messageParts[i].trim();\n\n            if (regex.test(messageParts[i])) {\n                var messageSpaceSplit = messageParts[i].split(/\\s/);\n                explicitRules.push(messageSpaceSplit.shift());\n                messageParts[i] = messageSpaceSplit.join(' ');\n            }\n        }\n\n        // Check if there's only one message\n        if (messageParts.length === 1) {\n            // Nothing to do here\n            return message;\n        }\n\n        // Check the explicit rules\n        for (var i = 0; i < explicitRules.length; i++) {\n            if (this._testInterval(count, explicitRules[i])) {\n                return messageParts[i];\n            }\n        }\n\n        // Standard rules\n        if (count === 1) {\n            return messageParts[0];\n        } else {\n            return messageParts[1];\n        }\n    };\n\n    /**\n     * Set the current locale.\n     *\n     * @param locale {string} The locale to set.\n     *\n     * @return void\n     */\n    Lang.prototype.setLocale = function (locale) {\n        this.locale = locale;\n    };\n\n    /**\n     * Get the current locale.\n     *\n     * @return {string} The current locale.\n     */\n    Lang.prototype.getLocale = function () {\n        return this.locale || this.defaultLocale;\n    };\n\n    /**\n     * Parse a message key into components.\n     *\n     * @param key {string} The message key to parse.\n     *\n     * @return {object} A key object with source and entries properties.\n     */\n    Lang.prototype._parseKey = function (key) {\n        if (typeof key !== 'string') {\n            return null;\n        }\n\n        var segments = key.split('.');\n\n        /**\n         * @note    This is deteting if the key is an add on but to be honest,\n         *          this should just work the same since the indexes stays the\n         *          same all throughout the translations.\n         *\n         *          I'm just not sure if there are any edge cases of nested\n         *          translations are included though I'm doubtful there are.\n         *\n         *          Just to clarify though, we _can_ just use this if there\n         *          aren't any nested translations.\n         */\n        if (key.includes('::')) {\n            return {\n                source: this.getLocale() + '.' + segments.splice(0, segments.length - 1).join('.'),\n                entries: segments.slice(segments.length - 1)\n            };\n        }\n\n        return {\n            source: this.getLocale() + '.' + segments[0],\n            entries: segments.slice(1)\n        };\n    };\n\n    /**\n     * Returns a translation message. Use `Lang.get()` method instead, this methods assumes the key exists.\n     *\n     * @param key {string} The key of the message.\n     *\n     * @return {string} The translation message for the given key.\n     */\n    Lang.prototype._getMessage = function (key) {\n\n        key = this._parseKey(key);\n\n        // Ensure message source exists.\n        if (this.messages[key.source] === undefined) {\n            return null;\n        }\n\n        // Get message text.\n        var message = this.messages[key.source];\n        while (key.entries.length && (message = message[key.entries.shift()])) {}\n\n        if (typeof message !== 'string') {\n            return null;\n        }\n\n        return message;\n    };\n\n    /**\n     * Apply replacements to a string message containing placeholders.\n     *\n     * @param message {string} The text message.\n     * @param replacements {object} The replacements to be done in the message.\n     *\n     * @return {string} The string message with replacements applied.\n     */\n    Lang.prototype._applyReplacements = function (message, replacements) {\n        for (var replace in replacements) {\n            message = message.split(':' + replace).join(replacements[replace]);\n        }\n        return message;\n    };\n\n    /**\n     * Checks if the given `count` is within the interval defined by the {string} `interval`\n     *\n     * @param  count {int}  The amount of items.\n     * @param  interval {string}    The interval to be compared with the count.\n     * @return {boolean}    Returns true if count is within interval; false otherwise.\n     */\n    Lang.prototype._testInterval = function (count, interval) {\n        /**\n         * From the Symfony\\Component\\Translation\\Interval Docs\n         *\n         * Tests if a given number belongs to a given math interval.\n         * An interval can represent a finite set of numbers: {1,2,3,4}\n         * An interval can represent numbers between two numbers: [1, +Inf] ]-1,2[\n         * The left delimiter can be [ (inclusive) or ] (exclusive).\n         * The right delimiter can be [ (exclusive) or ] (inclusive).\n         * Beside numbers, you can use -Inf and +Inf for the infinite.\n         */\n\n        return false;\n    };\n\n    return Lang;\n});\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n// Sticky Plugin v1.0.3 for jQuery\n// =============\n// Author: Anthony Garand\n// Improvements by German M. Bravo (Kronuz) and Ruud Kamphuis (ruudk)\n// Improvements by Leonardo C. Daronco (daronco)\n// Created: 02/14/2011\n// Date: 07/20/2015\n// Website: http://stickyjs.com/\n// Description: Makes an element on the page stick on the screen as you scroll\n//              It will only set the 'top' and 'position' of your element, you\n//              might need to adjust the width in some cases.\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n    // Node/CommonJS\n    module.exports = factory((window.$));\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  var slice = Array.prototype.slice; // save ref to original slice()\n  var splice = Array.prototype.splice; // save ref to original slice()\n\n  var defaults = {\n    topSpacing: 0,\n    bottomSpacing: 0,\n    className: 'is-sticky',\n    wrapperClassName: 'sticky-wrapper',\n    center: false,\n    getWidthFrom: '',\n    widthFromWrapper: true, // works only when .getWidthFrom is empty\n    responsiveWidth: false\n  },\n      $window = $(window),\n      $document = $(document),\n      sticked = [],\n      windowHeight = $window.height(),\n      scroller = function scroller() {\n    var scrollTop = $window.scrollTop(),\n        documentHeight = $document.height(),\n        dwh = documentHeight - windowHeight,\n        extra = scrollTop > dwh ? dwh - scrollTop : 0;\n\n    for (var i = 0, l = sticked.length; i < l; i++) {\n      var s = sticked[i],\n          elementTop = s.stickyWrapper.offset().top,\n          etse = elementTop - s.topSpacing - extra;\n\n      //update height in case of dynamic content\n      s.stickyWrapper.css('height', s.stickyElement.outerHeight());\n\n      if (scrollTop <= etse) {\n        if (s.currentTop !== null) {\n          s.stickyElement.css({\n            'width': '',\n            'position': '',\n            'top': ''\n          });\n          s.stickyElement.parent().removeClass(s.className);\n          s.stickyElement.trigger('sticky-end', [s]);\n          s.currentTop = null;\n        }\n      } else {\n        var newTop = documentHeight - s.stickyElement.outerHeight() - s.topSpacing - s.bottomSpacing - scrollTop - extra;\n        if (newTop < 0) {\n          newTop = newTop + s.topSpacing;\n        } else {\n          newTop = s.topSpacing;\n        }\n        if (s.currentTop !== newTop) {\n          var newWidth;\n          if (s.getWidthFrom) {\n            newWidth = $(s.getWidthFrom).width() || null;\n          } else if (s.widthFromWrapper) {\n            newWidth = s.stickyWrapper.width();\n          }\n          if (newWidth == null) {\n            newWidth = s.stickyElement.width();\n          }\n          s.stickyElement.css('width', newWidth).css('position', 'fixed').css('top', newTop);\n\n          s.stickyElement.parent().addClass(s.className);\n\n          if (s.currentTop === null) {\n            s.stickyElement.trigger('sticky-start', [s]);\n          } else {\n            // sticky is started but it have to be repositioned\n            s.stickyElement.trigger('sticky-update', [s]);\n          }\n\n          if (s.currentTop === s.topSpacing && s.currentTop > newTop || s.currentTop === null && newTop < s.topSpacing) {\n            // just reached bottom || just started to stick but bottom is already reached\n            s.stickyElement.trigger('sticky-bottom-reached', [s]);\n          } else if (s.currentTop !== null && newTop === s.topSpacing && s.currentTop < newTop) {\n            // sticky is started && sticked at topSpacing && overflowing from top just finished\n            s.stickyElement.trigger('sticky-bottom-unreached', [s]);\n          }\n\n          s.currentTop = newTop;\n        }\n\n        // Check if sticky has reached end of container and stop sticking\n        var stickyWrapperContainer = s.stickyWrapper.parent();\n        var unstick = s.stickyElement.offset().top + s.stickyElement.outerHeight() >= stickyWrapperContainer.offset().top + stickyWrapperContainer.outerHeight() && s.stickyElement.offset().top <= s.topSpacing;\n\n        if (unstick) {\n          s.stickyElement.css('position', 'absolute').css('top', '').css('bottom', 0);\n        } else {\n          s.stickyElement.css('position', 'fixed').css('top', newTop).css('bottom', '');\n        }\n      }\n    }\n  },\n      resizer = function resizer() {\n    windowHeight = $window.height();\n\n    for (var i = 0, l = sticked.length; i < l; i++) {\n      var s = sticked[i];\n      var newWidth = null;\n      if (s.getWidthFrom) {\n        if (s.responsiveWidth) {\n          newWidth = $(s.getWidthFrom).width();\n        }\n      } else if (s.widthFromWrapper) {\n        newWidth = s.stickyWrapper.width();\n      }\n      if (newWidth != null) {\n        s.stickyElement.css('width', newWidth);\n      }\n    }\n    scroller();\n  },\n      methods = {\n    init: function init(options) {\n      var o = $.extend({}, defaults, options);\n      return this.each(function () {\n        var stickyElement = $(this);\n\n        var stickyId = stickyElement.attr('id');\n        var wrapperId = stickyId ? stickyId + '-' + defaults.wrapperClassName : defaults.wrapperClassName;\n        var wrapper = $('<div></div>').attr('id', wrapperId).addClass(o.wrapperClassName);\n\n        stickyElement.wrapAll(wrapper);\n\n        var stickyWrapper = stickyElement.parent();\n\n        if (o.center) {\n          stickyWrapper.css({ width: stickyElement.outerWidth(), marginLeft: \"auto\", marginRight: \"auto\" });\n        }\n\n        if (stickyElement.css(\"float\") === \"right\") {\n          stickyElement.css({ \"float\": \"none\" }).parent().css({ \"float\": \"right\" });\n        }\n\n        o.stickyElement = stickyElement;\n        o.stickyWrapper = stickyWrapper;\n        o.currentTop = null;\n\n        sticked.push(o);\n\n        methods.setWrapperHeight(this);\n        methods.setupChangeListeners(this);\n      });\n    },\n\n    setWrapperHeight: function setWrapperHeight(stickyElement) {\n      var element = $(stickyElement);\n      var stickyWrapper = element.parent();\n      if (stickyWrapper) {\n        stickyWrapper.css('height', element.outerHeight());\n      }\n    },\n\n    setupChangeListeners: function setupChangeListeners(stickyElement) {\n      if (window.MutationObserver) {\n        var mutationObserver = new window.MutationObserver(function (mutations) {\n          if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {\n            methods.setWrapperHeight(stickyElement);\n          }\n        });\n        mutationObserver.observe(stickyElement, { subtree: true, childList: true });\n      } else {\n        stickyElement.addEventListener('DOMNodeInserted', function () {\n          methods.setWrapperHeight(stickyElement);\n        }, false);\n        stickyElement.addEventListener('DOMNodeRemoved', function () {\n          methods.setWrapperHeight(stickyElement);\n        }, false);\n      }\n    },\n    update: scroller,\n    unstick: function unstick(options) {\n      return this.each(function () {\n        var that = this;\n        var unstickyElement = $(that);\n\n        var removeIdx = -1;\n        var i = sticked.length;\n        while (i-- > 0) {\n          if (sticked[i].stickyElement.get(0) === that) {\n            splice.call(sticked, i, 1);\n            removeIdx = i;\n          }\n        }\n        if (removeIdx !== -1) {\n          unstickyElement.unwrap();\n          unstickyElement.css({\n            'width': '',\n            'position': '',\n            'top': '',\n            'float': ''\n          });\n        }\n      });\n    }\n  };\n\n  // should be more efficient than using $window.scroll(scroller) and $window.resize(resizer):\n  if (window.addEventListener) {\n    window.addEventListener('scroll', scroller, false);\n    window.addEventListener('resize', resizer, false);\n  } else if (window.attachEvent) {\n    window.attachEvent('onscroll', scroller);\n    window.attachEvent('onresize', resizer);\n  }\n\n  $.fn.sticky = function (method) {\n    if (methods[method]) {\n      return methods[method].apply(this, slice.call(arguments, 1));\n    } else if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {\n      return methods.init.apply(this, arguments);\n    } else {\n      $.error('Method ' + method + ' does not exist on jQuery.sticky');\n    }\n  };\n\n  $.fn.unstick = function (method) {\n    if (methods[method]) {\n      return methods[method].apply(this, slice.call(arguments, 1));\n    } else if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {\n      return methods.unstick.apply(this, arguments);\n    } else {\n      $.error('Method ' + method + ' does not exist on jQuery.sticky');\n    }\n  };\n  $(function () {\n    setTimeout(scroller, 0);\n  });\n});\n\n},{}],5:[function(require,module,exports){\n/*\r\n * Cookies.js - 1.2.2\r\n * https://github.com/ScottHamper/Cookies\r\n *\r\n * This is free and unencumbered software released into the public domain.\r\n */\r\n(function (global, undefined) {\r\n    'use strict';\r\n\r\n    var factory = function (window) {\r\n        if (typeof window.document !== 'object') {\r\n            throw new Error('Cookies.js requires a `window` with a `document` object');\r\n        }\r\n\r\n        var Cookies = function (key, value, options) {\r\n            return arguments.length === 1 ?\r\n                Cookies.get(key) : Cookies.set(key, value, options);\r\n        };\r\n\r\n        // Allows for setter injection in unit tests\r\n        Cookies._document = window.document;\r\n\r\n        // Used to ensure cookie keys do not collide with\r\n        // built-in `Object` properties\r\n        Cookies._cacheKeyPrefix = 'cookey.'; // Hurr hurr, :)\r\n        \r\n        Cookies._maxExpireDate = new Date('Fri, 31 Dec 9999 23:59:59 UTC');\r\n\r\n        Cookies.defaults = {\r\n            path: '/',\r\n            secure: false\r\n        };\r\n\r\n        Cookies.get = function (key) {\r\n            if (Cookies._cachedDocumentCookie !== Cookies._document.cookie) {\r\n                Cookies._renewCache();\r\n            }\r\n            \r\n            var value = Cookies._cache[Cookies._cacheKeyPrefix + key];\r\n\r\n            return value === undefined ? undefined : decodeURIComponent(value);\r\n        };\r\n\r\n        Cookies.set = function (key, value, options) {\r\n            options = Cookies._getExtendedOptions(options);\r\n            options.expires = Cookies._getExpiresDate(value === undefined ? -1 : options.expires);\r\n\r\n            Cookies._document.cookie = Cookies._generateCookieString(key, value, options);\r\n\r\n            return Cookies;\r\n        };\r\n\r\n        Cookies.expire = function (key, options) {\r\n            return Cookies.set(key, undefined, options);\r\n        };\r\n\r\n        Cookies._getExtendedOptions = function (options) {\r\n            return {\r\n                path: options && options.path || Cookies.defaults.path,\r\n                domain: options && options.domain || Cookies.defaults.domain,\r\n                expires: options && options.expires || Cookies.defaults.expires,\r\n                secure: options && options.secure !== undefined ?  options.secure : Cookies.defaults.secure\r\n            };\r\n        };\r\n\r\n        Cookies._isValidDate = function (date) {\r\n            return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime());\r\n        };\r\n\r\n        Cookies._getExpiresDate = function (expires, now) {\r\n            now = now || new Date();\r\n\r\n            if (typeof expires === 'number') {\r\n                expires = expires === Infinity ?\r\n                    Cookies._maxExpireDate : new Date(now.getTime() + expires * 1000);\r\n            } else if (typeof expires === 'string') {\r\n                expires = new Date(expires);\r\n            }\r\n\r\n            if (expires && !Cookies._isValidDate(expires)) {\r\n                throw new Error('`expires` parameter cannot be converted to a valid Date instance');\r\n            }\r\n\r\n            return expires;\r\n        };\r\n\r\n        Cookies._generateCookieString = function (key, value, options) {\r\n            key = key.replace(/[^#$&+\\^`|]/g, encodeURIComponent);\r\n            key = key.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\r\n            value = (value + '').replace(/[^!#$&-+\\--:<-\\[\\]-~]/g, encodeURIComponent);\r\n            options = options || {};\r\n\r\n            var cookieString = key + '=' + value;\r\n            cookieString += options.path ? ';path=' + options.path : '';\r\n            cookieString += options.domain ? ';domain=' + options.domain : '';\r\n            cookieString += options.expires ? ';expires=' + options.expires.toUTCString() : '';\r\n            cookieString += options.secure ? ';secure' : '';\r\n\r\n            return cookieString;\r\n        };\r\n\r\n        Cookies._getCacheFromString = function (documentCookie) {\r\n            var cookieCache = {};\r\n            var cookiesArray = documentCookie ? documentCookie.split('; ') : [];\r\n\r\n            for (var i = 0; i < cookiesArray.length; i++) {\r\n                var cookieKvp = Cookies._getKeyValuePairFromCookieString(cookiesArray[i]);\r\n\r\n                if (cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] === undefined) {\r\n                    cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] = cookieKvp.value;\r\n                }\r\n            }\r\n\r\n            return cookieCache;\r\n        };\r\n\r\n        Cookies._getKeyValuePairFromCookieString = function (cookieString) {\r\n            // \"=\" is a valid character in a cookie value according to RFC6265, so cannot `split('=')`\r\n            var separatorIndex = cookieString.indexOf('=');\r\n\r\n            // IE omits the \"=\" when the cookie value is an empty string\r\n            separatorIndex = separatorIndex < 0 ? cookieString.length : separatorIndex;\r\n\r\n            var key = cookieString.substr(0, separatorIndex);\r\n            var decodedKey;\r\n            try {\r\n                decodedKey = decodeURIComponent(key);\r\n            } catch (e) {\r\n                if (console && typeof console.error === 'function') {\r\n                    console.error('Could not decode cookie with key \"' + key + '\"', e);\r\n                }\r\n            }\r\n            \r\n            return {\r\n                key: decodedKey,\r\n                value: cookieString.substr(separatorIndex + 1) // Defer decoding value until accessed\r\n            };\r\n        };\r\n\r\n        Cookies._renewCache = function () {\r\n            Cookies._cache = Cookies._getCacheFromString(Cookies._document.cookie);\r\n            Cookies._cachedDocumentCookie = Cookies._document.cookie;\r\n        };\r\n\r\n        Cookies._areEnabled = function () {\r\n            var testKey = 'cookies.js';\r\n            var areEnabled = Cookies.set(testKey, 1).get(testKey) === '1';\r\n            Cookies.expire(testKey);\r\n            return areEnabled;\r\n        };\r\n\r\n        Cookies.enabled = Cookies._areEnabled();\r\n\r\n        return Cookies;\r\n    };\r\n\r\n    var cookiesExport = typeof global.document === 'object' ? factory(global) : factory;\r\n\r\n    // AMD support\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () { return cookiesExport; });\r\n    // CommonJS/Node.js support\r\n    } else if (typeof exports === 'object') {\r\n        // Support Node.js specific `module.exports` (which can be a function)\r\n        if (typeof module === 'object' && typeof module.exports === 'object') {\r\n            exports = module.exports = cookiesExport;\r\n        }\r\n        // But always support CommonJS module 1.1.1 spec (`exports` cannot be a function)\r\n        exports.Cookies = cookiesExport;\r\n    } else {\r\n        global.Cookies = cookiesExport;\r\n    }\r\n})(typeof window === 'undefined' ? this : window);\n},{}]},{},[1]);\n"],"file":"cp.js","sourceRoot":"/source/"}